Development History for Project FlowerPI (see: https://github.com/astaubert/flowerpi)
=====================================================================================

24.09.15 [air]		Created first python program!!!

		Used the following resource in order to do my first experiments from python to Rails
				
		http://docs.python-requests.org/en/latest/index.html
				
04.10.15 [air]		First version of flowerpi.py is ready!!!! Works great :-))

		Function: 
				
		- will query for a flower based on TAG number
		- if flower does not exist, it will create a DUMMY flower for the new tag
				
	
20.10.15 [pi]		Created GIT public repository (see github.com)

		echo "# flowerpi" >> README.md
		git init
		git add README.md
		git commit -m "first commit"
		git remote add origin https://github.com/astaubert/flowerpi.git
		git push -u origin master

		username: astaubert
		passwort: gi______5
		
23.10.15 [air]		Cloned repository also on MacBook Air

		Andreass-MBAir:PythonDev admin$ git clone https://github.com/astaubert/flowerpi
		Cloning into 'flowerpi'...
		remote: Counting objects: 7, done.
		remote: Compressing objects: 100% (5/5), done.
		remote: Total 7 (delta 0), reused 7 (delta 0), pack-reused 0
		Unpacking objects: 100% (7/7), done.
		Checking connectivity... done.
		Andreass-MBAir:PythonDev admin$ ls
		
		see git documentation how to treat clones: https://help.github.com/articles/fetching-a-remote/
		
27.10.15 [air]		Merged POST-Test (see 24.09. & 04.10) python programs with GPIO test program

		Created "Main" and "Import" structure based on recommendation in:
		http://intermediate-and-advanced-software-carpentry.readthedocs.org/en/latest/structuring-python.html
				
		Main Program is: floperpi-main.py
				
		Created my first library "fplog.py" which provides a generic logging function: 
				
		def l(value, test="no")
				
		Which logs the "value" to the console, as well as to different file, depending whether the function is
		executed as part of a library, or as part of a script!
		
		Created library "fppost.py", which implements the communication with the rails DB as a test ... so far
		
29.10.15 [pi]		Pulled data from repository into PI - works great! (see https://help.github.com/articles/fetching-a-remote)

pi@raspberrypi ~/flowerpi $ ls
dev_history.txt  gpiointest.pi  README.md
pi@raspberrypi ~/flowerpi $ git pull
remote: Counting objects: 24, done.
remote: Total 24 (delta 0), reused 0 (delta 0), pack-reused 24
Unpacking objects: 100% (24/24), done.
From https://github.com/astaubert/flowerpi
   3ce62a1..9fafd52  master     -> origin/master
Updating 3ce62a1..9fafd52
Fast-forward
 dev_history.txt                |   58 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 flowerpi-main.py               |    5 +++++
 flowerpi_post.py               |   39 +++++++++++++++++++++++++++++++++++++++
 flowerpi_test.log              |   21 +++++++++++++++++++++
 flowerpilog.pyc                |  Bin 0 -> 823 bytes
 fplog.py                       |   26 ++++++++++++++++++++++++++
 fplog.pyc                      |  Bin 0 -> 857 bytes
 fppost.py                      |   40 ++++++++++++++++++++++++++++++++++++++++
 gpiointest.pi => gpiointest.py |    0
 test_complex_post.py           |    9 +++++++++
 10 files changed, 197 insertions(+), 1 deletion(-)
 create mode 100644 flowerpi-main.py
 create mode 100644 flowerpi_post.py
 create mode 100644 flowerpi_test.log
 create mode 100644 flowerpilog.pyc
 create mode 100644 fplog.py
 create mode 100644 fplog.pyc
 create mode 100644 fppost.py
 rename gpiointest.pi => gpiointest.py (100%)
 create mode 100644 test_complex_post.py
pi@raspberrypi ~/flowerpi $ ls
dev_history.txt  flowerpi-main.py  flowerpi_test.log  fplog.pyc  gpiointest.py  test_complex_post.py
flowerpilog.pyc  flowerpi_post.py  fplog.py           fppost.py  README.md
pi@raspberrypi ~/flowerpi $ 

		Created library "fpflow.py", which implements the interface to the water-flow sensor via GPIO-IN
			
30.10.15		Continued to work on fpflow.py, create two functions: wfstart and wfcount

		Finished Test code in fpflow.py: waiting for water to flow (timeout 4 seconds), wait until water flow ends (output: counts)

		Worked on mechanical setup of "Gieskanne" with a wateflow sensor attached and a "Box" that could contain the electronics

		Added blue LED in fpflow.py to indicate system is waiting for water

		Working on fppost.py

		=> figured out the creating functions is not so helpful, since "requests" is used for most post functions anyway!

31.10.15		Created library "fprfid.py" based on "rfid_example.py" from D.J.Whale
		(see: http://blog.whaleygeek.co.uk/raspberry-pi-rfid-tag-reader)

		Changed GPIO setup in flowerpy.py to mode BCM, in order to comply with fprfid.py!

01.11.15		Created new function to query if site is online in fppost.py: def poquerysite(logtype="production")

		Worked on flowerpi-main.py on macbook

		Debug flowerpi-main.py on raspberry PI ... PHASE 1-3 WORK!!!

		PHASE4a also works: query if tag exists, if not create one.

		NEXT step to implement: ...	# Store new record in 'waters'

03.11.15	Implemented also green and red led to indicate success and failure in WEB communication ... WORKS!!!

21.11.15	Implemented support for new hardware-switch and LED to detect whether fertilizer was used or not

22.11.15	Debug new hardware-switch => works now

25.11.15	Managed to get remote access from mbair to Raspberry Pi via:

			Andreass-MBAir:~ admin$ ssh pi@raspberrypi
			pi@raspberrypi's password: pi.....e
			Linux raspberrypi 4.1.7-v7+ #817 SMP PREEMPT Sat Sep 19 15:32:00 BST 2015 armv7l

			The programs included with the Debian GNU/Linux system are free software;
			the exact distribution terms for each program are described in the
			individual files in /usr/share/doc/*/copyright.

			Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
			permitted by applicable law.
			Last login: Wed Nov 25 22:55:55 2015 from andreass-mbair.fritz.box
			pi@raspberrypi ~ $
			
			Added .gitignore file that contains: flowerpi_test.log and flowerpi_prod.log
			
			===>>>>> cool: remote control from Macbook works !!!
			
			Tried to shutdown PI via command:
			
			pi@raspberrypi ~/flowerpi $ sudo shutdown -h now

			Broadcast message from root@raspberrypi (pts/0) (Wed Nov 25 23:28:26 2015):
			The system is going down for system halt NOW!
			pi@raspberrypi ~/flowerpi $ Connection to raspberrypi closed by remote host.
			Connection to raspberrypi closed.
			Andreass-MBAir:~ admin$
			
			===>>>>> cool: remote shutdown works as well !!!

26.11.15	Added WiFi-2 to wlan-configuration, based on: https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md

29.11.15    Added code to upload new 'water record' to web application ===>> WORKS :-))

			Implemented LED color schema according to https://immense-cliffs-8170.herokuapp.com/piflowtable.html
			
			Implemented infinite loop in flowerpi-main.py
			
			===>> Works :-)), was able to demonstrate a couple of "waterings" after each other!
			
19.12.15	Renamed log-files to fp_prod.log and fp_test.log

28.12.15	Worked on fpflow.wfcount in order to increase count-values (Aufloesung) of watering-events

			Implemented script and CRONTAB to restart WLAN if lost, based on:
			
			    http://weworkweplay.com/play/rebooting-the-raspberry-pi-when-it-loses-wireless-connection-wifi/
			
			Change IP address from DHCP to static - 192.168.178.37 (sudo nano /etc/network/interfaces), based on:
			
			    http://weworkweplay.com/play/automatically-connect-a-raspberry-pi-to-a-wifi-network/

29.12.15	Evaluated conversion factor from count to mL: 

			# overriding GLOBAL variable with local content; Division of factor 1.76 mL/counts, turns counts into mL

			global WATERCOUNT; WATERCOUNT = int(totalcount * 1.76)		
			
			==> Calibration of counts to water in mL ===>>> WORKS :-))) 
			
			Created version of FlowerPI V01.01.00
			
30.12.15	Tried to reduce crashes during "reading of the RF-ID"

			# RF-ID lesen
			global RFIDREAD; RFIDREAD = False

			while not(RFIDREAD):
				try:
					phase2readrfid()
				except Exception:
					fplog.l("Error: Exception during execution of phase2readrfid()")
					blinkredled()
			
			Was able to reproduce a problem once where the card was not read properly ===>>> Works:
			
			fplog 2015-12-30 16:29:05: Waiting for a card...
			fplog 2015-12-30 16:29:07: Card is present
			fplog 2015-12-30 16:29:07: Error: The scanned RF-id tag is not a mifare card
			fplog 2015-12-30 16:29:22: Error: Exception during execution of phase2readrfid()
			fplog 2015-12-30 16:29:24: PHASE2: wait for RF-ID tag

			Created version of FlowerPI V01.02.00
			
			Added automatic startup of flowerpi-main.py at startup of Raspberrypi based on:
			
			http://raspberrypi.stackexchange.com/questions/28199/raspberry-pi-starting-programs-automatically-on-startup
			
			Using daemontools:
			
			pi@raspberrypi ~ $ sudo apt-get install daemontools daemontools-run
			Reading package lists... Done
			Building dependency tree       
			Reading state information... Done
			The following NEW packages will be installed:
			  daemontools daemontools-run
			0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.
			Need to get 75.2 kB of archives.
			After this operation, 338 kB of additional disk space will be used.
			Get:1 http://mirrordirector.raspbian.org/raspbian/ wheezy/main daemontools armhf 1:0.76-3 [65.8 kB]
			Get:2 http://mirrordirector.raspbian.org/raspbian/ wheezy/main daemontools-run all 1:0.76-3 [9,324 B]
			Fetched 75.2 kB in 0s (125 kB/s)      
			Selecting previously unselected package daemontools.
			(Reading database ... 79097 files and directories currently installed.)
			Unpacking daemontools (from .../daemontools_1%3a0.76-3_armhf.deb) ...
			Selecting previously unselected package daemontools-run.
			Unpacking daemontools-run (from .../daemontools-run_1%3a0.76-3_all.deb) ...
			Processing triggers for man-db ...
			Setting up daemontools (1:0.76-3) ...
			Setting up daemontools-run (1:0.76-3) ...
			Adding SV inittab entry...

			pi@raspberrypi ~ $ sudo mkdir -p /service/flowerpi
			
			pi@raspberrypi ~ $ sudo nano run

			#!/bin/sh
			sudo rm -rf /service/flowerpi/fp_prod.log
			sudo rm -rf /service/flowerpi/fp_test.log
			sudo python /home/pi/flowerpi/flowerpi-main.py
			
			pi@raspberrypi ~ $ cd /etc/service/
			pi@raspberrypi /etc/service $ sudo ln -s /service/flowerpi .
			pi@raspberrypi /etc/service $ ls -la
			total 8
			drwxr-xr-x   2 root root 4096 Dec 30 17:10 .
			drwxr-xr-x 103 root root 4096 Dec 30 16:17 ..
			lrwxrwxrwx   1 root root   17 Dec 30 17:10 flowerpi -> /service/flowerpi
			pi@raspberrypi /etc/service $
			
			Cool ===>>> WORKS! Python program starts automatically on boot, or re-starts upon crash ;-))
			
			Another source with usefull commands for daemontools:
			
			http://lgallardo.com/en/2013/05/06/daemontools-o-como-relanzar-un-proceso-si-muere/
			
			check how long program did run:
			
			pi@raspberrypi ~/flowerpi $ ps ax | grep flowerpi
			 2230 ?        S      0:00 supervise flowerpi
			 2233 ?        S      0:00 sudo python /home/pi/flowerpi/flowerpi-main.py
			 2235 ?        S      0:02 python /home/pi/flowerpi/flowerpi-main.py
			 2535 pts/0    S+     0:00 grep --color=auto flowerpi
			
			other way to check if program / service is running my means of using SVSTAT:
			
			pi@raspberrypi ~/flowerpi $ sudo svstat /etc/service/flowerpi
			/etc/service/flowerpi: up (pid 2231) 978 seconds
			
			STOPPING the service:
			
			pi@raspberrypi ~ $ sudo svc -d /etc/service/flowerpi
  
			pi@raspberrypi ~ $ sudo svstat /etc/service/flowerpi
			/etc/service/flowerpi: down 113 seconds, normally up


			STARTING the service:

			pi@raspberrypi ~ $ sudo svc -u /etc/service/flowerpi
			
			
			Set timeout for watering back to 10 seconds ==> Created version of FlowerPI V01.02.01
			
			Bugfix, logtype was set to "test" instead of "prod" ==> Created version of FlowerPI V01.02.02
			
04.01.16	Changed WEB-URL to: gentle-taiga-6367.herokuapp.com

			After creating a new Heroku APP (after deployment problem of changed flowerpi-heroku rails app)
			
			==> Created version V01.02.03
			
			Change fertilizercheck result from 0/1 to no/yes
			
			==> Created version V01.02.04
			
17.01.16	Tried to fix crash, when watering flowertype: "Kräuter". Root cause might be the "ä"
			In order to fix, added the following code in fplog.py:
			
			#added to normalize unicode values to ascii values, not to get problems with printout on console
			#based on: http://stackoverflow.com/questions/1207457/convert-a-unicode-string-to-a-string-in-python-containing-extra-symbols
			logstring.encode('ascii','ignore')

			==> Created version V01.02.05
			
22.01.16	Tried to fix WLAN dropouts again - looks like it is a "Power" related problem

			Implemented measures as described here:
			http://raspberrypi.stackexchange.com/questions/5364/wifi-connection-gets-dropped-quite-often-with-edimax-ew-7711utn
			
			1.) add this to your /etc/network/interfaces

			    wireless-power off
			
			2.) Found this explanation which states power management from the driver might be at fault. 
				It also suggests using these changes for the driver:

				sudo nano /etc/modprobe.d/8192cu.conf

				and paste the following in:

				# Disable power saving
				options 8192cu rtw_power_mgnt=0 rtw_enusbss=1 rtw_ips_mode=1 
				
			Note: since the "EQ-7612UAN V2" uses the 8191u chipset, I also added:
			
			3.) sudo nano /etc/modprobe.d/8191cu.conf

				and paste the following in:

				# Disable power saving
				options 8191cu rtw_power_mgnt=0 rtw_enusbss=1 rtw_ips_mode=1
				
			After reboot, WLAN works immeditalley ==>> let's see how it behaves in the future ...
			
			HEUREKA: WLAN PROBLEM looks like solved :-)))
			
23.01.16	Implemented method to shut-down Raspberry PI after 'Shutdown-Tag' (attached to Gieskanne) was read

			if RFIDUID == "A1CF06B0":
				fplog.l("Read Shutdown-Tag; shutdown will be initiated; goodby!")
				os.system("sudo shutdown -h now")
				
			==> Created version V01.03.00			


			
++++++++++++++++++++++++++++++++++++++++

External libraries that need to be installed:

	1.) requests (see: http://docs.python-requests.org)


++++++++++++++++++++++++++++++++++++++++

Changes to Raspberry PI Linux environment:

28.12.15:   Implemented script and CRONTAB in order to re-start WLAN in case it is lost, check every 1 minute

			based on: http://weworkweplay.com/play/rebooting-the-raspberry-pi-when-it-loses-wireless-connection-wifi/
			
			(changed from 5 minutes to 1 minutes WLAN check)
			
30.12.15:	Implemented script and DAEMONTOOLS in order to start application

			based on: http://raspberrypi.stackexchange.com/questions/28199/raspberry-pi-starting-programs-automatically-on-startup
			
			and: http://lgallardo.com/en/2013/05/06/daemontools-o-como-relanzar-un-proceso-si-muere/

++++++++++++++++++++++++++++++++++++++++

GPIO-Belegung [BCM notation!]:

	in fpflow:

		# Set to the GPIO required to monitor the waterflow sensor (BCM notation!)
		GPIO_WATERFLOW_SENSOR = 22

		# Set to the GPIO required to activate the blue LED (BCM notation!)
		GPIO_BLUE_LED = 7

	in flowerpi-main.py:

       ... see sourcecode!

++++++++++++++++++++++++++++++++++++++++

GIT UPLOAD:

git add .
git commit -m "my commit comment"
git push -u origin master
username: astaubert
passwort: gi________5


GIT DOWNLOAD (commit first!):

git pull

+++++++++++++++++++++

REMOTE ACCESS to PI:

ssh pi@raspberrypi

pi@raspberrypi's password: pi.....e

‚+++++++++++++++++++++

SHUTDONW:

sudo shutdown -h now

